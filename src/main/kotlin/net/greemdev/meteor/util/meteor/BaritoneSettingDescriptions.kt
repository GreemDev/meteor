/*
 * This file is part of the Meteor Client distribution (https://github.com/MeteorDevelopment/meteor-client).
 * Copyright (c) Meteor Development.
 */

@file:JvmName("BaritoneSettingDescriptions")

package net.greemdev.meteor.util.meteor

context(MutableMap<String, String>)
private operator fun String.plusAssign(str: String) {
    set(lowercase(), str)
}

@JvmName("get")
fun getDescriptionOf(settingName: String) = descriptions[settingName.lowercase()] ?: settingName

private val descriptions = buildMap {
    "acceptableThrowawayItems" += "Blocks that Baritone is allowed to place (as throwaway, for sneak bridging, pillaring, etc.)"
    "allowBreak" += "Allow Baritone to break blocks."
    "allowBreakAnyway" += "Blocks that baritone will be allowed to break even with allowBreak set to false."
    "allowDiagonalAscend" += "Allow diagonal ascending."
    "allowDiagonalDescend" += "Allow descending diagonally."
    "allowDownward" += "Allow mining the block directly beneath its feet."
    "allowInventory" += "Allow Baritone to move items in your inventory to your hotbar."
    "allowJumpAt256" += "If true, parkour is allowed to make jumps when standing on blocks at the maximum height, so player feet is y=256."
    "allowOnlyExposedOres" += "This will only allow baritone to mine exposed ores, can be used to stop ore obfuscators on servers that use them."
    "allowOnlyExposedOresDistance" += "When allowOnlyExposedOres is enabled this is the distance around to search."
    "allowOvershootDiagonalDescend" += "Is it okay to sprint through a descend followed by a diagonal? The player overshoots the landing, but not enough to fall off."
    "allowParkour" += "You know what it is."
    "allowParkourAscend" += "This should be monetized it's so good."
    "allowParkourPlace" += "Actually pretty reliable."
    "allowPlace" += "Allow Baritone to place blocks."
    "allowSprint" += "Allow Baritone to sprint."
    "allowVines" += "Enables some more advanced vine features."
    "allowWalkOnBottomSlab" += "Slab behavior is complicated, disable this for higher path reliability."
    "allowWaterBucketFall" += "Allow Baritone to fall arbitrary distances and place a water bucket beneath it."
    "antiCheatCompatibility" += "Will cause some minor behavioral differences to ensure that Baritone works on anticheats."
    "assumeExternalAutoTool" += "Disable Baritone's auto-tool at runtime, and assume that another mod will provide auto tool functionality."
    "assumeSafeWalk" += "Assume safe walk functionality; don't sneak on a backplace traverse."
    "assumeStep" += "Assume step functionality; don't jump on an Ascend."
    "assumeWalkOnLava" += "If you have Fire Resistance and Liquid Walker on then I guess you could enable this."
    "assumeWalkOnWater" += "Allow Baritone to assume it can walk on still water just like any other block."
    "autoTool" += "Automatically select the best available tool."
    "avoidance" += "Toggle the following 4 settings."
    "avoidBreakingMultiplier" += "this multiplies the break speed, if set above 1 it's \"encourage breaking\" instead."
    "avoidUpdatingFallingBlocks" += "If this setting is true, Baritone will never break a block that is adjacent to an unsupported falling block."
    "axisHeight" += "The \"axis\" command (aka GoalAxis) will go to a axis, or diagonal axis, at this Y level."
    "backfill" += "Fill in blocks behind you (Stealth +100)."
    "backtrackCostFavoringCoefficient" += "Set to 1.0 to effectively disable this feature."
    "blacklistClosestOnFailure" += "When GetToBlockProcess or MineProcess fails to calculate a path, instead of just giving up, mark the closest instance of that block as \"unreachable\" and go towards the next closest."
    "blockBreakAdditionalPenalty" += "This is just a tiebreaker to make it less likely to break blocks if it can avoid it."
    "blockPlacementPenalty" += "It doesn't actually take twenty ticks to place a block, this cost is so high because we want to generally conserve blocks which might be limited."
    "blockReachDistance" += "Block reach distance."
    "blocksToAvoid" += "Blocks that Baritone will attempt to avoid (Used in avoidance)."
    "blocksToAvoidBreaking" += "blocks that baritone shouldn't break, but can if it needs to."
    "blocksToDisallowBreaking" += "Blocks that Baritone is not allowed to break."
    "breakCorrectBlockPenaltyMultiplier" += "Multiply the cost of breaking a block that's correct in the builder's schematic by this coefficient."
    "breakFromAbove" += "Allow standing above a block while mining it, in BuilderProcess."
    "builderTickScanRadius" += "Distance to scan every tick for updates."
    "buildIgnoreBlocks" += "A list of blocks to be treated as if they're air."
    "buildIgnoreDirection" += "If this is true, the builder will ignore directionality of certain blocks like glazed terracotta."
    "buildIgnoreExisting" += "If this is true, the builder will treat all non-air blocks as correct."
    "buildInLayers" += "Don't consider the next layer in builder until the current one is done."
    "buildOnlySelection" += "Only build the selected part of schematics."
    "buildRepeat" += "How far to move before repeating the build."
    "buildRepeatCount" += "How many times to buildrepeat."
    "buildRepeatSneaky" += "Don't notify schematics that they are moved."
    "buildSkipBlocks" += "A list of blocks to be treated as correct."
    "buildSubstitutes" += "A mapping of blocks to blocks to be built instead."
    "buildValidSubstitutes" += "A mapping of blocks to blocks treated as correct in their position."
    "cachedChunksExpirySeconds" += "Cached chunks (regardless of if they're in RAM or saved to disk) expire and are deleted after this number of seconds -1 to disable."
    "cachedChunksOpacity" += "0.0f = not visible, fully transparent (instead of setting this to 0, turn off renderCachedChunks) 1.0f = fully opaque."
    "cancelOnGoalInvalidation" += "Cancel the current path if the goal has changed, and the path originally ended in the goal but doesn't anymore."
    "censorCoordinates" += "Censor coordinates in goals and block positions."
    "censorRanCommands" += "Censor arguments to ran commands, to hide, for example, coordinates to #goal."
    "chatControl" += "Allow chat based control of Baritone."
    "chatDebug" += "Print all the debug messages to chat."
    "chunkCaching" += "The big one."
    "colorBestPathSoFar" += "The color of the best path so far."
    "colorBlocksToBreak" += "The color of the blocks to break."
    "colorBlocksToPlace" += "The color of the blocks to place."
    "colorBlocksToWalkInto" += "The color of the blocks to walk into."
    "colorCurrentPath" += "The color of the current path."
    "colorGoalBox" += "The color of the goal box."
    "colorInvertedGoalBox" += "The color of the goal box when it's inverted."
    "colorMostRecentConsidered" += "The color of the path to the most recent considered node."
    "colorNextPath" += "The color of the next path."
    "colorSelection" += "The color of all selections."
    "colorSelectionPos1" += "The color of the selection pos 1."
    "colorSelectionPos2" += "The color of the selection pos 2."
    "considerPotionEffects" += "For example, if you have Mining Fatigue or Haste, adjust the costs of breaking blocks accordingly."
    "costHeuristic" += "This is the big A* setting."
    "costVerificationLookahead" += "Stop 5 movements before anything that made the path COST_INF."
    "cutoffAtLoadBoundary" += "After calculating a path (potentially through cached chunks), artificially cut it off to just the part that is entirely within currently loaded chunks."
    "desktopNotifications" += "Desktop notifications."
    "disableCompletionCheck" += "Turn this on if your exploration filter is enormous, you don't want it to check if it's done, and you are just fine with it just hanging on completion."
    "disconnectOnArrival" += "Disconnect from the server upon arriving at your goal."
    "distanceTrim" += "Trim incorrect positions too far away, helps performance but hurts reliability in very large schematics."
    "doBedWaypoints" += "Allows baritone to save bed waypoints when interacting with beds."
    "doDeathWaypoints" += "Allows baritone to save death waypoints."
    "echoCommands" += "Echo commands to chat when they are run."
    "enterPortal" += "When running a goto towards a nether portal block, walk all the way into the portal instead of stopping one block before."
    "exploreChunkSetMinimumSize" += "Take the 10 closest chunks, even if they aren't strictly tied for distance metric from origin."
    "exploreForBlocks" += "When GetToBlock or non-legit Mine doesn't know any locations for the desired block, explore randomly instead of giving up."
    "exploreMaintainY" += "Attempt to maintain Y coordinate while exploring."
    "extendCacheOnThreshold" += "When the cache scan gives less blocks than the maximum threshold (but still above zero), scan the main world too."
    "fadePath" += "Start fading out the path at 20 movements ahead, and stop rendering it entirely 30 movements ahead."
    "failureTimeoutMS" += "Pathing can never take longer than this, even if that means failing to find any path at all."
    "followOffsetDirection" += "The actual GoalNear is set in this direction from the entity you're following."
    "followOffsetDistance" += "The actual GoalNear is set this distance away from the entity you're following."
    "followRadius" += "The radius (for the GoalNear) of how close to your target position you actually have to be."
    "forceInternalMining" += "When mining block of a certain type, try to mine two at once instead of one."
    "freeLook" += "Move without having to force the client-sided rotations."
    "goalBreakFromAbove" += "As well as breaking from above, set a goal to up and to the side of all blocks to break."
    "goalRenderLineWidthPixels" += "Line width of the goal when rendered, in pixels."
    "incorrectSize" += "The set of incorrect blocks can never grow beyond this size."
    "internalMiningAirException" += "Modification to the previous setting, only has effect if forceInternalMining is true.\nIf true, only apply the previous setting if the block adjacent to the goal isn't air."
    "itemSaver" += "Stop using tools just before they are going to break."
    "itemSaverThreshold" += "Durability to leave on the tool when using itemSaver."
    "jumpPenalty" += "Additional penalty for hitting the space bar (ascend, pillar, or parkour) because it uses hunger."
    "layerHeight" += "How high should the individual layers be?"
    "layerOrder" += "false = build from bottom to top."
    "legitMine" += "Disallow MineBehavior from using X-Ray to see where the ores are."
    "legitMineIncludeDiagonals" += "Magically see ores that are separated diagonally from existing ores."
    "legitMineYLevel" += "What Y level to go to for legit strip mining."
    "logAsToast" += "Shows popup message in the upper right corner, similarly to when you make an advancement."
    "mapArtMode" += "Build in map art mode, which makes baritone only care about the top block in each column."
    "maxCachedWorldScanCount" += "After finding this many instances of the target block in the cache, it will stop expanding outward the chunk search."
    "maxCostIncrease" += "If a movement's cost increases by more than this amount between calculation and execution (due to changes in the environment / world), cancel and recalculate."
    "maxFallHeightBucket" += "How far are you allowed to fall onto solid ground (with a water bucket)? It's not that reliable, so I've set it below what would kill an unarmored player (23)."
    "maxFallHeightNoWater" += "How far are you allowed to fall onto solid ground (without a water bucket)? 3 won't deal any damage."
    "maxPathHistoryLength" += "If we are more than this amount of movements into the current path, discard the oldest segments, as they are no longer useful."
    "mineDropLoiterDurationMSThanksLouca" += "While mining, wait this number of milliseconds after mining an ore to see if it will drop an item instead of immediately going onto the next one."
    "mineGoalUpdateInterval" += "Rescan for the goal once every x ticks."
    "mineScanDroppedItems" += "While mining, should it also consider dropped items of the correct type as a pathing destination (as well as ore blocks)?"
    "minimumImprovementRepropagation" += "Don't repropagate cost improvements below 0.01 ticks."
    "minYLevelWhileMining" += "Sets the minimum y level whilst mining - set to 0 to turn off. If world has negative y values, subtract the min world height to get the value to put here."
    "mobAvoidanceCoefficient" += "Set to 1.0 to effectively disable this feature. Negative will make you go out of your way to go near mobs."
    "mobAvoidanceRadius" += "Distance to avoid mobs."
    "mobSpawnerAvoidanceCoefficient" += "Set to 1.0 to effectively disable this feature. Negative will make you go out of your way to go near spawners."
    "mobSpawnerAvoidanceRadius" += "Distance to avoid mob spawners."
    "movementTimeoutTicks" += "If movement takes this many ticks more than its initial cost estimate, cancel it."
    "notificationOnBuildFinished" += "Desktop notification on build finished."
    "notificationOnExploreFinished" += "Desktop notification on explore finished."
    "notificationOnFarmFail" += "Desktop notification on farm fail."
    "notificationOnMineFail" += "Desktop notification on mine fail."
    "notificationOnPathComplete" += "Desktop notification on path complete."
    "notifier" += "The function that is called when Baritone will send a desktop notification."
    "okIfAir" += "A list of blocks to become air."
    "okIfWater" += "Override builder's behavior to not attempt to correct blocks that are currently water."
    "overshootTraverse" += "If we overshoot a traverse and end up one block beyond the destination, mark it as successful anyway."
    "pathCutoffFactor" += "Static cutoff factor."
    "pathCutoffMinimumLength" += "Only apply static cutoff for paths of at least this length (in terms of number of movements)."
    "pathHistoryCutoffAmount" += "If the current path is too long, cut off this many movements from the beginning."
    "pathingMapDefaultSize" += "Default size of the Long2ObjectOpenHashMap used in pathing."
    "pathingMapLoadFactor" += "Load factor coefficient for the Long2ObjectOpenHashMap used in pathing."
    "pathingMaxChunkBorderFetch" += "The maximum number of times it will fetch outside loaded or cached chunks before assuming that pathing has reached the end of the known area, and should therefore stop."
    "pathRenderLineWidthPixels" += "Line width of the path when rendered, in pixels."
    "pathThroughCachedOnly" += "Exclusively use cached chunks for pathing."
    "pauseMiningForFallingBlocks" += "When breaking blocks for a movement, wait until all falling blocks have settled before continuing."
    "planAheadFailureTimeoutMS" += "Planning ahead while executing a segment can never take longer than this, even if that means failing to find any path at all."
    "planAheadPrimaryTimeoutMS" += "Planning ahead while executing a segment ends after this amount of time, but only if a path has been found."
    "planningTickLookahead" += "Start planning the next path once the remaining movements tick estimates sum up to less than this value."
    "preferSilkTouch" += "Always prefer silk touch tools over regular tools."
    "prefix" += "The command prefix for chat control."
    "prefixControl" += "Whether or not to allow you to run Baritone commands with the prefix."
    "primaryTimeoutMS" += "Pathing ends after this amount of time, but only if a path has been found."
    "pruneRegionsFromRAM" += "On save, delete from RAM any cached regions that are more than 1024 blocks away from the player."
    "randomLooking" += "How many degrees to randomize the pitch and yaw every tick."
    "randomLooking113" += "How many degrees to randomize the yaw every tick. Set to 0 to disable."
    "renderCachedChunks" += "Render cached chunks as semitransparent."
    "renderGoal" += "Render the goal."
    "renderGoalAnimated" += "Render the goal as a sick animated thingy instead of just a box (also controls animation of GoalXZ if renderGoalXZBeacon is enabled)."
    "renderGoalIgnoreDepth" += "Ignore depth when rendering the goal."
    "renderGoalXZBeacon" += "Renders X/Z type Goals with the vanilla beacon beam effect."
    "renderPath" += "Render the path."
    "renderPathAsLine" += "Render the path as a line instead of a frickin thingy."
    "renderPathIgnoreDepth" += "Ignore depth when rendering the path."
    "renderSelection" += "Render selections."
    "renderSelectionBoxes" += "Render selection boxes."
    "renderSelectionBoxesIgnoreDepth" += "Ignore depth when rendering the selection boxes (to break, to place, to walk into)."
    "renderSelectionCorners" += "Render selection corners."
    "renderSelectionIgnoreDepth" += "Ignore depth when rendering selections."
    "repackOnAnyBlockChange" += "Whenever a block changes, repack the whole chunk that it's in."
    "replantCrops" += "Replant normal Crops while farming and leave cactus and sugarcane to regrow."
    "replantNetherWart" += "Replant nether wart while farming."
    "rightClickContainerOnArrival" += "When running a goto towards a container block (chest, ender chest, furnace, etc), right click and open it once you arrive."
    "rightClickSpeed" += "How many ticks between right clicks are allowed."
    "schematicFallbackExtension" += "The fallback used by the build command when no extension is specified."
    "schematicOrientationX" += "When this setting is true, build a schematic with the highest X coordinate being the origin, instead of the lowest."
    "schematicOrientationY" += "When this setting is true, build a schematic with the highest Y coordinate being the origin, instead of the lowest."
    "schematicOrientationZ" += "When this setting is true, build a schematic with the highest Z coordinate being the origin, instead of the lowest."
    "selectionLineWidth" += "Line width of the goal when rendered, in pixels."
    "selectionOpacity" += "The opacity of the selection."
    "shortBaritonePrefix" += "Use a short Baritone prefix [B] instead of [Baritone] when logging to chat."
    "simplifyUnloadedYCoord" += "If your goal is a GoalBlock in an unloaded chunk, assume it's far enough away that the Y coord doesn't matter yet, and replace it with a GoalXZ to the same place before calculating a path."
    "skipFailedLayers" += "If a layer is unable to be constructed, just skip it."
    "slowPath" += "For debugging, consider nodes much much slower."
    "slowPathTimeDelayMS" += "Milliseconds between each node."
    "slowPathTimeoutMS" += "The alternative timeout number when slowPath is on."
    "splicePath" += "When a new segment is calculated that doesn't overlap with the current one, but simply begins where the current segment ends, splice it on and make a longer combined path."
    "sprintAscends" += "Sprint and jump a block early on ascends wherever possible."
    "sprintInWater" += "Continue sprinting while in water."
    "startAtLayer" += "Start building the schematic at a specific layer."
    "toaster" += "The function that is called when Baritone will show a toast."
    "toastTimer" += "The time of how long the message in the pop-up will display."
    "useSwordToMine" += "Use sword to mine."
    "verboseCommandExceptions" += "Print out ALL command exceptions as a stack trace to stdout, even simple syntax errors."
    "walkOnWaterOnePenalty" += "Walking on water uses up hunger really quick, so penalize it."
    "walkWhileBreaking" += "Don't stop walking forward when you need to break blocks in your way."
    "worldExploringChunkOffset" += "While exploring the world, offset the closest unloaded chunk by this much in both axes."
    "yLevelBoxSize" += "The size of the box that is rendered when the current goal is a GoalYLevel."
}
