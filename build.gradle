plugins {
    id "fabric-loom" version "1.4-SNAPSHOT"
    id "org.jetbrains.kotlin.jvm" version "1.9.21"
    id "maven-publish"
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version + "-rev" + project.revision
group = project.maven_group

repositories {
    maven {
        name = "meteor-maven"
        url = "https://maven.meteordev.org/releases"
    }
    maven {
        name = "meteor-maven-snapshots"
        url = "https://maven.meteordev.org/snapshots"
    }
    maven {
        name = "modrinth"
        url = "https://api.modrinth.com/maven"

        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "vram"
        url = "https://maven.vram.io//"
    }
    mavenCentral()
}

configurations {
    // include mods
    modImplementation.extendsFrom(modInclude)
    include.extendsFrom(modInclude)

    // include libraries
    implementation.extendsFrom(library)
    shadow.extendsFrom(library)
}

dependencies {
    // Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modInclude fabricApi.module("fabric-resource-loader-v0", project.fapi_version)
    modInclude fabricApi.module("fabric-rendering-v1", project.fapi_version)

    // Kotlin
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    // Compat fixes
    modCompileOnly fabricApi.module("fabric-renderer-indigo", project.fapi_version)
    modCompileOnly("maven.modrinth:sodium:${project.sodium_version}") { transitive = false }
    modCompileOnly("maven.modrinth:lithium:${project.lithium_version}") { transitive = false }
    modCompileOnly("maven.modrinth:iris:${project.iris_version}") { transitive = false }
    modCompileOnly("maven.modrinth:indium:${project.indium_version}") { transitive = false }

    // Baritone (https://github.com/MeteorDevelopment/baritone)
    modInclude "baritone:fabric:${project.minecraft_version}-SNAPSHOT"

    // Libraries
    library "meteordevelopment:orbit:${project.orbit_version}"
    library "meteordevelopment:starscript:${project.starscript_version}"
    library "meteordevelopment:discord-ipc:${project.discordipc_version}"
    library "org.reflections:reflections:${project.reflections_version}"
    library("io.netty:netty-handler-proxy:${project.netty_version}") { transitive = false }
    library("io.netty:netty-codec-socks:${project.netty_version}") { transitive = false }
    library "io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_version}"
    annotationProcessor "io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_version}"
    library "de.florianmichael:WaybackAuthLib:1.0.0"
}

compileKotlin {
    kotlinOptions.freeCompilerArgs += "-Xcontext-receivers"
    kotlinOptions.jvmTarget = "17"
}

loom {
    accessWidenerPath = file("src/main/resources/meteor-client.accesswidener")
}

afterEvaluate {
    migrateMappings.configure {
        outputDir = project.file("src/main/java")
    }
}

shadowJar {
    configurations = [project.configurations.shadow]

    dependencies {
        exclude {
            it.moduleGroup == "org.slf4j"
        }
    }
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": project.version,
            "rev": project.revision,
            "kotlinVersion": project.fabric_kotlin_version,
            "minecraftVersion": project.minecraft_version,
            "loaderVersion": project.loader_version
    }
}

jar {
    from "LICENSE"
}

remapJar {
    dependsOn shadowJar
    inputFile.set(shadowJar.archiveFile)
}

javadoc {
    options.addStringOption("Xdoclint:none", "-quiet")
    options.encoding = "UTF-8"
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}
